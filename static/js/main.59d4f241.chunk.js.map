{"version":3,"sources":["Components/Weather/Search/CitySearch.jsx","Components/Weather/Weather.jsx","Api/Api.js","Store/Reducers/WeatherReducer.js","App.js","reportWebVitals.js","Store/ReduxStore.js","index.js","Components/Weather/Weather.module.css","App.module.css"],"names":["CitySearch","props","map","city","index","onClick","changeCity","initialValues","validationSchema","Yup","max","matches","onSubmit","values","name","placeholder","type","Weather","weatherData","weather","setWeatherByCityName","slice","toUpperCase","className","style","container","search","country","sys","temp","Math","round","main","stats","description","humidity","wind","speed","apiKey","weatherApi","axios","lat","lon","temperature","setWeatherData","data","connect","state","dispatch","then","response","status","console","log","catch","setWeatherByCords","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.59d4f241.chunk.js","sourcesContent":["import {ErrorMessage, Field, Form, Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nconst CitySearch = (props) => {\r\n    return (\r\n        <div>\r\n            {['Moscow', 'Odesa', 'London', 'Paris'].map((city, index) => <button key={index} onClick={() => props.changeCity(city)}>{city}</button>)}\r\n            <Formik\r\n                initialValues= {{\r\n                    city : '',\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    city: Yup.string().max(15, 'To long').matches(/^[aA-zZ\\s]+$/, \"Only alphabets\")\r\n                })}\r\n\r\n                onSubmit={values => {\r\n                    props.changeCity(values.city)\r\n                }}\r\n            >\r\n                <Form>\r\n                    <Field\r\n                        name='city'\r\n                        placeholder='Enter your city'\r\n                        type='input'\r\n                    />\r\n                    <ErrorMessage name='city'/>\r\n                    <button type='submit' >Search</button>\r\n                </Form>\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CitySearch","import CitySearch from './Search/CitySearch'\r\nimport style from './Weather.module.css'\r\n\r\n\r\n\r\nconst Weather = (props) => {\r\n    let weatherData = props.weather.weatherData\r\n\r\n    // Отправляем запрос на сервер\r\n    const changeCity = (city) => {\r\n        props.setWeatherByCityName(city.slice(0, 1).toUpperCase() + city.slice(1))\r\n    }\r\n\r\n    return (\r\n        <div className={style.container}>\r\n\r\n            {/* Данные о погоде */}\r\n            {weatherData &&\r\n                <>\r\n                    {/* Поиск  города */}\r\n                    <div className={style.search}>\r\n                        <CitySearch changeCity={changeCity} />\r\n                    </div>\r\n\r\n\r\n                    <div className={style.country}>\r\n                        {weatherData.name}, {weatherData.sys.country}\r\n                    </div>\r\n\r\n                    <div className={style.temp}>\r\n                        {Math.round(weatherData.main.temp)}&deg;\r\n                    </div>\r\n\r\n                    <div className={style.stats}>\r\n                        {weatherData.weather['0'].description.slice(0, 1).toUpperCase() + weatherData.weather['0'].description.slice(1)}\r\n                        <br />\r\n                        Humidity : {weatherData.main.humidity}%\r\n                        <br />\r\n                        Wind : {weatherData.wind.speed} m/s\r\n                    </div>\r\n                </>\r\n            }\r\n\r\n            {/* пока нет данных */}\r\n            {!weatherData &&\r\n                <>\r\n                    <div className={style.search}>\r\n                        <CitySearch changeCity={changeCity} />\r\n                    </div>\r\n\r\n                    <div className={style.country}>\r\n                        City\r\n                    </div>\r\n\r\n                    <div className={style.temp}>\r\n                        C&deg;\r\n                    </div>\r\n\r\n                    <div className={style.stats}>\r\n                        -/-\r\n                        <br />\r\n                        -/-\r\n                        <br />\r\n                        -/-\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Weather","import * as axios from 'axios'\r\n\r\nconst apiKey = 'fbc74a9620317bbdb6f2ca1d5b488f04'\r\n\r\nexport const weatherApi = {\r\n    getWeatherByCityName(city){\r\n        return axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\r\n    },\r\n\r\n    getWeatherByCords(lat, lon){\r\n        return axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`)\r\n    }\r\n}","\r\nimport { weatherApi } from \"../../Api/Api\"\r\n\r\nconst SET_COUNTRY_WEATHER = 'Weather/SET-COUNTRY-WEATHER'\r\n\r\nconst initialValues = {\r\n    city: 'EXAMPLE',\r\n    temperature: 10,\r\n\r\n    weatherData: null,\r\n\r\n}\r\n\r\nexport const weatherReducer = (state = initialValues, action) => {\r\n    switch (action.type) {\r\n        case 'Weather/SET-COUNTRY-WEATHER':\r\n            return { ...state, weatherData: { ...action.data } }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport const setWeatherData = (data) => ({ type: SET_COUNTRY_WEATHER, data })\r\n\r\n\r\n//Thunk\r\n\r\n// Запрос по названию города\r\nexport const setWeatherByCityName = (city) => (dispatch) => {\r\n\r\n    weatherApi.getWeatherByCityName(city)\r\n        .then(response => {\r\n            if (response.status >= 200 && response.status <= 299) {\r\n                dispatch(setWeatherData(response.data))\r\n            } else if (response.status >= 400) {\r\n                console.log('No Information about your country')\r\n            }\r\n\r\n        })\r\n        .catch(response => console.log(response))\r\n}\r\n\r\n//Запрлс по координатам\r\nexport const setWeatherByCords = (lat, lon) => (dispatch) => {\r\n\r\n    weatherApi.getWeatherByCords(lat, lon)\r\n        .then(response => {\r\n            if (response.status >= 200 && response.status <= 299) {\r\n                dispatch(setWeatherData(response.data))\r\n            } else if (response.status >= 400) {\r\n                console.log('No Information about your country')\r\n            }\r\n\r\n        })\r\n        .catch(response => console.log(response))\r\n}\r\n\r\n","import React, { useEffect } from 'react';\nimport style from './App.module.css'\nimport Weather from './Components/Weather/Weather';\nimport { connect } from 'react-redux'\nimport { setWeatherByCityName, setWeatherByCords } from './Store/Reducers/WeatherReducer'\n\nfunction App(props) {\n  // Получаем данные по месту положения\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n        console.log(position)\n        props.setWeatherByCords(position.coords.latitude, position.coords.longitude)\n    })\n  },[])\n\n  return (\n    <div className={style.container}>\n      <Weather weather={props.weather} setWeatherByCityName={props.setWeatherByCityName} />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    weather: state.weather\n  }\n}\n\nexport default connect(mapStateToProps, { setWeatherByCityName, setWeatherByCords })(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport  { weatherReducer } from './Reducers/WeatherReducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nlet reducers = combineReducers({\r\n    weather : weatherReducer\r\n})\r\n\r\n\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './Store/ReduxStore'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Weather_container__1KQYX\",\"country\":\"Weather_country__5WCqH\",\"temp\":\"Weather_temp__nWpDd\",\"stats\":\"Weather_stats__DuqaI\",\"search\":\"Weather_search__xFx0c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2uDtg\"};"],"sourceRoot":""}